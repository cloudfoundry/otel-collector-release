<%=
def config
  @config ||= begin
    cfg = retrieve_property('config')
    cfg = handle_old_properties(cfg) if cfg.empty?
    cfg
  end
end

def check_for_new_and_old_properties!
  both_provided = !p('config').empty? && (!p('metric_exporters').empty? || !p('trace_exporters').empty?)
  return unless both_provided

  raise "Can not provide 'config' property when deprecated 'metric_exporters' or 'trace_exporters' properties are provided"
end

def retrieve_property(name)
  if p(name).respond_to?(:keys)
    p(name)
  else
    YAML.safe_load(p(name))
  end
end

def handle_old_properties(cfg)
  metric_exporters = retrieve_property('metric_exporters')
  trace_exporters = retrieve_property('trace_exporters')
  raise 'Exporter names must be unique' unless (trace_exporters.keys - metric_exporters.keys) == trace_exporters.keys

  cfg['exporters'] = metric_exporters.merge(trace_exporters)
  cfg['service'] = { 'pipelines' => {} }

  if metric_exporters.any?
    cfg['service']['pipelines']['metrics'] = {
        'receivers' => ['otlp/cf-local'],
        'exporters' => metric_exporters.keys
      }
  end

  if trace_exporters.any?
    cfg['service']['pipelines']['traces'] = {
        'receivers' => ['otlp/cf-local'],
        'exporters' => trace_exporters.keys
      }
  end

  cfg
end

def check_for_no_exporters!
  raise 'Exporter configuration must be provided' unless config['exporters']
end

def check_for_no_service_config!
  raise 'Service configuration must be provided' unless config['service']
end

def check_for_use_of_reserved_prefix!
  %w[exporters processors].each do |component|
    if config[component] && config[component].keys.any? { |k| k.include?('/cf-internal') }
      raise "#{component.capitalize} cannot be defined under cf-internal namespace"
    end
  end
end

def check_for_use_of_reserved_bbs_api_port!
  if config['exporters'] && config['exporters'].any? do |k, v|
       k.start_with?('prometheus/') && v['endpoint'] && v['endpoint'].end_with?(':8889')
     end
    raise 'Cannot define prometheus exporter listening on port 8889 (reserved for BBS API port)'
  end
end

def set_internal_receiver_as_only_receiver
  config['receivers'] = {
    'otlp/cf-internal-local' => {
      'protocols' => {
        'grpc' => {
          'endpoint' => "#{p('ingress.grpc.address')}:#{p('ingress.grpc.port')}",
          'tls' => {
            'client_ca_file' => '/var/vcap/jobs/otel-collector/config/certs/otel-collector-ca.crt',
            'cert_file' => '/var/vcap/jobs/otel-collector/config/certs/otel-collector.crt',
            'key_file' => '/var/vcap/jobs/otel-collector/config/certs/otel-collector.key',
            'min_version' => '1.3'
          }
        }
      }
    }
  }
end

def set_internal_receiver_on_all_pipelines
  config['service']['pipelines'].each_value do |p|
    p['receivers'] = ['otlp/cf-internal-local']
  end
end

def expose_internal_telemetry
  config['service']['telemetry'] = {
    'metrics' => {
      'address' => "127.0.0.1:#{p('telemetry.metrics.port')}",
      'level' => p('telemetry.metrics.level')
    }
  }
end

check_for_new_and_old_properties!
check_for_no_exporters!
check_for_no_service_config!
check_for_use_of_reserved_prefix!
check_for_use_of_reserved_bbs_api_port!
set_internal_receiver_as_only_receiver
set_internal_receiver_on_all_pipelines
expose_internal_telemetry

YAML.dump(config)
%>

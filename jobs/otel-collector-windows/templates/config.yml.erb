<%=
metric_exporters = p('metric_exporters')
unless metric_exporters.respond_to?(:keys)
  metric_exporters = YAML::load(metric_exporters)
end

trace_exporters = p('trace_exporters')
unless trace_exporters.respond_to?(:keys)
  trace_exporters = YAML::load(trace_exporters)
end

unless (trace_exporters.keys-metric_exporters.keys) == trace_exporters.keys
  raise "Exporter names must be unique"
end

if (metric_exporters.keys + trace_exporters.keys).any?{|k| k.include?('/cf-internal')}
  raise 'Exporters cannot be defined under cf-internal namespace'
end

if metric_exporters.any?{|k, v| k.start_with?('prometheus') && v['endpoint'] && v['endpoint'].end_with?(':8889')}
  raise 'Cannot define prometheus exporter listening on port 8889 (reserved for BBS API port)'
end

config = {
  "receivers"=> {
    "otlp"=>{
      "protocols"=>{
        "grpc"=>{
          "endpoint"=>"#{p('ingress.grpc.address')}:#{p('ingress.grpc.port')}",
          "tls"=>{
            "client_ca_file"=>"/var/vcap/jobs/otel-collector-windows/config/certs/otel-collector-ca.crt",
             "cert_file"=>"/var/vcap/jobs/otel-collector-windows/config/certs/otel-collector.crt",
             "key_file"=>"/var/vcap/jobs/otel-collector-windows/config/certs/otel-collector.key",
             "min_version"=>"1.3"
          }
        }
      }
    }
  },
  "exporters"=>metric_exporters.merge(trace_exporters),
  "service"=>{
    "telemetry"=>{
      "metrics"=>{
        "level"=>p('telemetry.metrics.level'),
        "address"=>"127.0.0.1:#{p('telemetry.metrics.port')}"
      }
    },
    "pipelines"=>{}
  }
}

if metric_exporters.any?
  config['service']['pipelines']['metrics'] = {"receivers"=>["otlp"], "exporters"=>metric_exporters.keys}
end

if trace_exporters.any?
  config['service']['pipelines']['traces'] = {"receivers"=>["otlp"], "exporters"=>trace_exporters.keys}
end

YAML::dump(config)
%>
